unit frmChatU;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.StdCtrls, FMX.Controls.Presentation, FMX.Layouts, FMX.Memo.Types,
  FMX.ScrollBox, FMX.Memo, FMX.ListBox, FMX.Edit, System.Bluetooth;

type
  TServiceThread = class(TThread)
  private
    // Socket para comunicação de dados entre devices
    FSocket: TBluetoothSocket;
  protected
    // Procesamento da thread
    procedure Execute; override;
  public
    // Socket do servidor (apenas para escuta de conexoes)
    FServerSocket: TBluetoothServerSocket;
    // Ponteiro para mostrar a saída no formulario
    FDisplay: TMemo;
    // Nome do dispositivo remoto
    FNomeDispositivo: String;
    // Contrutor da classe
    constructor Create(ACreateSuspended: Boolean);
    // Destrutor da classe
    destructor Destroy; override;
  end;

  TfrmChat = class(TForm)
    Rectangle1: TRectangle;
    Button1: TButton;
    Label1: TLabel;
    Button2: TButton;
    Layout1: TLayout;
    Layout2: TLayout;
    Layout3: TLayout;
    memHistorico: TMemo;
    Label2: TLabel;
    cbDispositivo: TComboBox;
    btnServidor: TButton;
    edtTexto: TEdit;
    btnEnviar: TButton;
  private
    { Private declarations }
  public
    { Public declarations }
    // Dispositivo selecionado
    FDispositivo: TBluetoothDevice;
    // Socket do cliente.
    FSocket: TBluetoothSocket;
    // Thread paralela, recebe dados no servidor.
    FThreadServidor: TServiceThread;
  end;

var
  frmChat: TfrmChat;
const
  // Nome do serviço que criaremos
  ChatServiceName = 'Chat de texto';
  // GUID (globally unique identifier) do servico a ser criado (Ctrl+Shift+G)
  ChatGUI = '{E2DEFE5F-7005-4A36-9F7C-CCB00DD97DAB}';

implementation

{$R *.fmx}

end.
