unit frmDescobertaU;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Objects,
  FMX.StdCtrls, FMX.Controls.Presentation, FMX.ListView.Types,
  FMX.ListView.Appearances, FMX.ListView.Adapters.Base, FMX.ListView,
  FMX.Layouts, System.Bluetooth, frmServicosU;

type
  TfrmDescoberta = class(TForm)
    Rectangle1: TRectangle;
    Button1: TButton;
    Button2: TButton;
    Label1: TLabel;
    lstDispositivos: TListView;
    AnilIndicator1: TAniIndicator;
    Layout1: TLayout;
    btnVisivel: TButton;
    btnParear: TButton;
    procedure btnVisivelClick(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure btnParearClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmDescoberta: TfrmDescoberta;

implementation

uses
  frmPrincipalU;

{$R *.fmx}

procedure TfrmDescoberta.btnParearClick(Sender: TObject);
var
  LDispositivo: TBluetoothDevice;
begin

  // Verifica se não tem um dispositivo selecionado
  // da lista de devices
  if lstDispositivos.ItemIndex < 0 then begin
    // Se não tiver, indica ao usuário o que fazer
    ShowMessage('Selecione um dispositivo.');
    Exit;
  end;

  // Guarda o dispositivo da lista na variável
  LDispositivo:= frmPrincipal
              .Bluetooth1 // Acessa o componente Bluetooth
              .LastDiscoveredDevices // Acessa a lista de devices descobertos
              // A partir do item selecionado na lista
              // seleciona o device do componente Bluetooth
              .Items[lstDispositivos.ItemIndex];

  // Faz o pareamento com o device da variável
  frmPrincipal.Bluetooth1.Pair(LDispositivo);

  // Armazena o device pareado na propriedade que também
  // guarda o device do formulário Servicos da unit frmServicosU
  frmServicos.FDispositivo := LDispositivo;

  // Não permite o usuário atualizar os serviços do device
  frmServicos.Button2.Enabled := false;
  // Mostra o formulário com os serviços
  frmServicos.Show;

end;

procedure TfrmDescoberta.btnVisivelClick(Sender: TObject);
begin

  // Ao deixar o dispositivo visível o loading ficará
  // ativo, mostrando que uma ação está ocorrendo
  // e identificando o usuário
  AnilIndicator1.Visible := True;
  AnilIndicator1.Enabled := True;
  // O botão não fica disponível durante esse tempo
  btnVisivel.Enabled := False;

  // Verifica qual ambiente estamos usando
  // Se é Windows ou qualquer outro device
  {$IFDEF WIN32}
    // Se for Windows chamamos a função que faz o
    // device poder ser descoberto por 15s
    // 15000 = 15s ; 1000 = 1s
    frmPrincipal.Bluetooth1.StartDiscoverable(15000);
  {$ELSE}
    // Caso seja qualquer outro que não o Windows
    // chamamos também a função de deixar visível
    // o device por 15s
    frmPrincipal.Bluetooth1.StartDiscoverable(15);
  {$ENDIF}

end;

procedure TfrmDescoberta.Button1Click(Sender: TObject);
begin
  Close;
end;

procedure TfrmDescoberta.Button2Click(Sender: TObject);
begin

  // Limpa o ListView caso ele já contenha algum dispositivo
  // isso impede que tenhamos dois items para um mesmo device
  lstDispositivos.Items.Clear;

  // Ao buscar por dispositivos mostramos o Loading
  // ao usuário para mostrá-lo que tem algo acontecendo
  AnilIndicator1.Visible := True;
  AnilIndicator1.Enabled := True;
  // Desativamos o botão pareamento pois ele ainda está buscando
  btnParear.Enabled := False;

  // Chama a função do componente Bluetooth que busca por
  // dispositivos usando o Bluetooth do device
  // 10000 = 10s; 1000 = 1s
  frmPrincipal.Bluetooth1.DiscoverDevices(10000);

end;

end.
